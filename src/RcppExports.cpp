// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// intraLaplacian
NumericMatrix intraLaplacian(NumericVector mod);
RcppExport SEXP _nettools_intraLaplacian(SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(intraLaplacian(mod));
    return rcpp_result_gen;
END_RCPP
}
// directProd
NumericMatrix directProd(NumericMatrix Li, int n);
RcppExport SEXP _nettools_directProd(SEXP LiSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Li(LiSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(directProd(Li, n));
    return rcpp_result_gen;
END_RCPP
}
// IntraAdj
NumericMatrix IntraAdj(NumericVector mod);
RcppExport SEXP _nettools_IntraAdj(SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(IntraAdj(mod));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nettools_intraLaplacian", (DL_FUNC) &_nettools_intraLaplacian, 1},
    {"_nettools_directProd", (DL_FUNC) &_nettools_directProd, 2},
    {"_nettools_IntraAdj", (DL_FUNC) &_nettools_IntraAdj, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_nettools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
